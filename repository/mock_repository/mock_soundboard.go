// Code generated by MockGen. DO NOT EDIT.
// Source: soundboard.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/gofrs/uuid"
	model "github.com/traPtitech/traQ/model"
)

// MockSoundboardRepository is a mock of SoundboardRepository interface.
type MockSoundboardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSoundboardRepositoryMockRecorder
}

// MockSoundboardRepositoryMockRecorder is the mock recorder for MockSoundboardRepository.
type MockSoundboardRepositoryMockRecorder struct {
	mock *MockSoundboardRepository
}

// NewMockSoundboardRepository creates a new mock instance.
func NewMockSoundboardRepository(ctrl *gomock.Controller) *MockSoundboardRepository {
	mock := &MockSoundboardRepository{ctrl: ctrl}
	mock.recorder = &MockSoundboardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSoundboardRepository) EXPECT() *MockSoundboardRepositoryMockRecorder {
	return m.recorder
}

// CreateSoundboardItem mocks base method.
func (m *MockSoundboardRepository) CreateSoundboardItem(soundID uuid.UUID, soundName string, stampID *uuid.UUID, creatorID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSoundboardItem", soundID, soundName, stampID, creatorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSoundboardItem indicates an expected call of CreateSoundboardItem.
func (mr *MockSoundboardRepositoryMockRecorder) CreateSoundboardItem(soundID, soundName, stampID, creatorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSoundboardItem", reflect.TypeOf((*MockSoundboardRepository)(nil).CreateSoundboardItem), soundID, soundName, stampID, creatorID)
}

// GetAllSoundboardItems mocks base method.
func (m *MockSoundboardRepository) GetAllSoundboardItems() ([]*model.SoundboardItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSoundboardItems")
	ret0, _ := ret[0].([]*model.SoundboardItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSoundboardItems indicates an expected call of GetAllSoundboardItems.
func (mr *MockSoundboardRepositoryMockRecorder) GetAllSoundboardItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSoundboardItems", reflect.TypeOf((*MockSoundboardRepository)(nil).GetAllSoundboardItems))
}

// GetSoundboardByCreatorID mocks base method.
func (m *MockSoundboardRepository) GetSoundboardByCreatorID(creatorID uuid.UUID) ([]*model.SoundboardItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSoundboardByCreatorID", creatorID)
	ret0, _ := ret[0].([]*model.SoundboardItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSoundboardByCreatorID indicates an expected call of GetSoundboardByCreatorID.
func (mr *MockSoundboardRepositoryMockRecorder) GetSoundboardByCreatorID(creatorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSoundboardByCreatorID", reflect.TypeOf((*MockSoundboardRepository)(nil).GetSoundboardByCreatorID), creatorID)
}

// UpdateSoundboardCreatorID mocks base method.
func (m *MockSoundboardRepository) UpdateSoundboardCreatorID(soundID, creatorID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSoundboardCreatorID", soundID, creatorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSoundboardCreatorID indicates an expected call of UpdateSoundboardCreatorID.
func (mr *MockSoundboardRepositoryMockRecorder) UpdateSoundboardCreatorID(soundID, creatorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSoundboardCreatorID", reflect.TypeOf((*MockSoundboardRepository)(nil).UpdateSoundboardCreatorID), soundID, creatorID)
}

// DeleteSoundboardItem mocks base method.
func (m *MockSoundboardRepository) DeleteSoundboardItem(soundID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSoundboardItem", soundID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSoundboardItem indicates an expected call of DeleteSoundboardItem.
func (mr *MockSoundboardRepositoryMockRecorder) DeleteSoundboardItem(soundID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSoundboardItem", reflect.TypeOf((*MockSoundboardRepository)(nil).DeleteSoundboardItem), soundID)
}