// Code generated by MockGen. DO NOT EDIT.
// Source: file.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	model "github.com/traPtitech/traQ/model"
	repository "github.com/traPtitech/traQ/repository"
)

// MockFileRepository is a mock of FileRepository interface.
type MockFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepositoryMockRecorder
}

// MockFileRepositoryMockRecorder is the mock recorder for MockFileRepository.
type MockFileRepositoryMockRecorder struct {
	mock *MockFileRepository
}

// NewMockFileRepository creates a new mock instance.
func NewMockFileRepository(ctrl *gomock.Controller) *MockFileRepository {
	mock := &MockFileRepository{ctrl: ctrl}
	mock.recorder = &MockFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepository) EXPECT() *MockFileRepositoryMockRecorder {
	return m.recorder
}

// DeleteFileMeta mocks base method.
func (m *MockFileRepository) DeleteFileMeta(fileID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileMeta", fileID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileMeta indicates an expected call of DeleteFileMeta.
func (mr *MockFileRepositoryMockRecorder) DeleteFileMeta(fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileMeta", reflect.TypeOf((*MockFileRepository)(nil).DeleteFileMeta), fileID)
}

// DeleteFileThumbnail mocks base method.
func (m *MockFileRepository) DeleteFileThumbnail(fileID uuid.UUID, thumbnailType model.ThumbnailType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileThumbnail", fileID, thumbnailType)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileThumbnail indicates an expected call of DeleteFileThumbnail.
func (mr *MockFileRepositoryMockRecorder) DeleteFileThumbnail(fileID, thumbnailType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileThumbnail", reflect.TypeOf((*MockFileRepository)(nil).DeleteFileThumbnail), fileID, thumbnailType)
}

// GetFileMeta mocks base method.
func (m *MockFileRepository) GetFileMeta(fileID uuid.UUID) (*model.FileMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileMeta", fileID)
	ret0, _ := ret[0].(*model.FileMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileMeta indicates an expected call of GetFileMeta.
func (mr *MockFileRepositoryMockRecorder) GetFileMeta(fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileMeta", reflect.TypeOf((*MockFileRepository)(nil).GetFileMeta), fileID)
}

// GetFileMetas mocks base method.
func (m *MockFileRepository) GetFileMetas(q repository.FilesQuery) ([]*model.FileMeta, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileMetas", q)
	ret0, _ := ret[0].([]*model.FileMeta)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFileMetas indicates an expected call of GetFileMetas.
func (mr *MockFileRepositoryMockRecorder) GetFileMetas(q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileMetas", reflect.TypeOf((*MockFileRepository)(nil).GetFileMetas), q)
}

// IsFileAccessible mocks base method.
func (m *MockFileRepository) IsFileAccessible(fileID, userID uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFileAccessible", fileID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFileAccessible indicates an expected call of IsFileAccessible.
func (mr *MockFileRepositoryMockRecorder) IsFileAccessible(fileID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFileAccessible", reflect.TypeOf((*MockFileRepository)(nil).IsFileAccessible), fileID, userID)
}

// SaveFileMeta mocks base method.
func (m *MockFileRepository) SaveFileMeta(meta *model.FileMeta, acl []*model.FileACLEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFileMeta", meta, acl)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveFileMeta indicates an expected call of SaveFileMeta.
func (mr *MockFileRepositoryMockRecorder) SaveFileMeta(meta, acl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFileMeta", reflect.TypeOf((*MockFileRepository)(nil).SaveFileMeta), meta, acl)
}
