// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: message/v1/message.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/traPtitech/traQ/router/v4/gen/message/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MessageServiceName is the fully-qualified name of the MessageService service.
	MessageServiceName = "message.v1.MessageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MessageServiceListChannelMessagesProcedure is the fully-qualified name of the MessageService's
	// ListChannelMessages RPC.
	MessageServiceListChannelMessagesProcedure = "/message.v1.MessageService/ListChannelMessages"
	// MessageServicePostMessageProcedure is the fully-qualified name of the MessageService's
	// PostMessage RPC.
	MessageServicePostMessageProcedure = "/message.v1.MessageService/PostMessage"
	// MessageServiceDeleteMessageProcedure is the fully-qualified name of the MessageService's
	// DeleteMessage RPC.
	MessageServiceDeleteMessageProcedure = "/message.v1.MessageService/DeleteMessage"
)

// MessageServiceClient is a client for the message.v1.MessageService service.
type MessageServiceClient interface {
	ListChannelMessages(context.Context, *connect.Request[v1.ListChannelMessagesRequest]) (*connect.Response[v1.Messages], error)
	PostMessage(context.Context, *connect.Request[v1.PostMessageRequest]) (*connect.Response[v1.Message], error)
	DeleteMessage(context.Context, *connect.Request[v1.DeleteMessageRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewMessageServiceClient constructs a client for the message.v1.MessageService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMessageServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MessageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	messageServiceMethods := v1.File_message_v1_message_proto.Services().ByName("MessageService").Methods()
	return &messageServiceClient{
		listChannelMessages: connect.NewClient[v1.ListChannelMessagesRequest, v1.Messages](
			httpClient,
			baseURL+MessageServiceListChannelMessagesProcedure,
			connect.WithSchema(messageServiceMethods.ByName("ListChannelMessages")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		postMessage: connect.NewClient[v1.PostMessageRequest, v1.Message](
			httpClient,
			baseURL+MessageServicePostMessageProcedure,
			connect.WithSchema(messageServiceMethods.ByName("PostMessage")),
			connect.WithIdempotency(connect.IdempotencyIdempotent),
			connect.WithClientOptions(opts...),
		),
		deleteMessage: connect.NewClient[v1.DeleteMessageRequest, emptypb.Empty](
			httpClient,
			baseURL+MessageServiceDeleteMessageProcedure,
			connect.WithSchema(messageServiceMethods.ByName("DeleteMessage")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// messageServiceClient implements MessageServiceClient.
type messageServiceClient struct {
	listChannelMessages *connect.Client[v1.ListChannelMessagesRequest, v1.Messages]
	postMessage         *connect.Client[v1.PostMessageRequest, v1.Message]
	deleteMessage       *connect.Client[v1.DeleteMessageRequest, emptypb.Empty]
}

// ListChannelMessages calls message.v1.MessageService.ListChannelMessages.
func (c *messageServiceClient) ListChannelMessages(ctx context.Context, req *connect.Request[v1.ListChannelMessagesRequest]) (*connect.Response[v1.Messages], error) {
	return c.listChannelMessages.CallUnary(ctx, req)
}

// PostMessage calls message.v1.MessageService.PostMessage.
func (c *messageServiceClient) PostMessage(ctx context.Context, req *connect.Request[v1.PostMessageRequest]) (*connect.Response[v1.Message], error) {
	return c.postMessage.CallUnary(ctx, req)
}

// DeleteMessage calls message.v1.MessageService.DeleteMessage.
func (c *messageServiceClient) DeleteMessage(ctx context.Context, req *connect.Request[v1.DeleteMessageRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteMessage.CallUnary(ctx, req)
}

// MessageServiceHandler is an implementation of the message.v1.MessageService service.
type MessageServiceHandler interface {
	ListChannelMessages(context.Context, *connect.Request[v1.ListChannelMessagesRequest]) (*connect.Response[v1.Messages], error)
	PostMessage(context.Context, *connect.Request[v1.PostMessageRequest]) (*connect.Response[v1.Message], error)
	DeleteMessage(context.Context, *connect.Request[v1.DeleteMessageRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewMessageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMessageServiceHandler(svc MessageServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	messageServiceMethods := v1.File_message_v1_message_proto.Services().ByName("MessageService").Methods()
	messageServiceListChannelMessagesHandler := connect.NewUnaryHandler(
		MessageServiceListChannelMessagesProcedure,
		svc.ListChannelMessages,
		connect.WithSchema(messageServiceMethods.ByName("ListChannelMessages")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	messageServicePostMessageHandler := connect.NewUnaryHandler(
		MessageServicePostMessageProcedure,
		svc.PostMessage,
		connect.WithSchema(messageServiceMethods.ByName("PostMessage")),
		connect.WithIdempotency(connect.IdempotencyIdempotent),
		connect.WithHandlerOptions(opts...),
	)
	messageServiceDeleteMessageHandler := connect.NewUnaryHandler(
		MessageServiceDeleteMessageProcedure,
		svc.DeleteMessage,
		connect.WithSchema(messageServiceMethods.ByName("DeleteMessage")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/message.v1.MessageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MessageServiceListChannelMessagesProcedure:
			messageServiceListChannelMessagesHandler.ServeHTTP(w, r)
		case MessageServicePostMessageProcedure:
			messageServicePostMessageHandler.ServeHTTP(w, r)
		case MessageServiceDeleteMessageProcedure:
			messageServiceDeleteMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMessageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMessageServiceHandler struct{}

func (UnimplementedMessageServiceHandler) ListChannelMessages(context.Context, *connect.Request[v1.ListChannelMessagesRequest]) (*connect.Response[v1.Messages], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("message.v1.MessageService.ListChannelMessages is not implemented"))
}

func (UnimplementedMessageServiceHandler) PostMessage(context.Context, *connect.Request[v1.PostMessageRequest]) (*connect.Response[v1.Message], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("message.v1.MessageService.PostMessage is not implemented"))
}

func (UnimplementedMessageServiceHandler) DeleteMessage(context.Context, *connect.Request[v1.DeleteMessageRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("message.v1.MessageService.DeleteMessage is not implemented"))
}
