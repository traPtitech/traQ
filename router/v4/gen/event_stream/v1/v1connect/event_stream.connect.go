// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: event_stream/v1/event_stream.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/traPtitech/traQ/router/v4/gen/event_stream/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EventStreamServiceName is the fully-qualified name of the EventStreamService service.
	EventStreamServiceName = "event_stream.v1.EventStreamService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EventStreamServiceSubscribeEventStreamProcedure is the fully-qualified name of the
	// EventStreamService's SubscribeEventStream RPC.
	EventStreamServiceSubscribeEventStreamProcedure = "/event_stream.v1.EventStreamService/SubscribeEventStream"
)

// EventStreamServiceClient is a client for the event_stream.v1.EventStreamService service.
type EventStreamServiceClient interface {
	SubscribeEventStream(context.Context, *connect.Request[v1.SubscribeEventStreamRequest]) (*connect.ServerStreamForClient[v1.SubscribeEventStreamResponse], error)
}

// NewEventStreamServiceClient constructs a client for the event_stream.v1.EventStreamService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEventStreamServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EventStreamServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	eventStreamServiceMethods := v1.File_event_stream_v1_event_stream_proto.Services().ByName("EventStreamService").Methods()
	return &eventStreamServiceClient{
		subscribeEventStream: connect.NewClient[v1.SubscribeEventStreamRequest, v1.SubscribeEventStreamResponse](
			httpClient,
			baseURL+EventStreamServiceSubscribeEventStreamProcedure,
			connect.WithSchema(eventStreamServiceMethods.ByName("SubscribeEventStream")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// eventStreamServiceClient implements EventStreamServiceClient.
type eventStreamServiceClient struct {
	subscribeEventStream *connect.Client[v1.SubscribeEventStreamRequest, v1.SubscribeEventStreamResponse]
}

// SubscribeEventStream calls event_stream.v1.EventStreamService.SubscribeEventStream.
func (c *eventStreamServiceClient) SubscribeEventStream(ctx context.Context, req *connect.Request[v1.SubscribeEventStreamRequest]) (*connect.ServerStreamForClient[v1.SubscribeEventStreamResponse], error) {
	return c.subscribeEventStream.CallServerStream(ctx, req)
}

// EventStreamServiceHandler is an implementation of the event_stream.v1.EventStreamService service.
type EventStreamServiceHandler interface {
	SubscribeEventStream(context.Context, *connect.Request[v1.SubscribeEventStreamRequest], *connect.ServerStream[v1.SubscribeEventStreamResponse]) error
}

// NewEventStreamServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEventStreamServiceHandler(svc EventStreamServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	eventStreamServiceMethods := v1.File_event_stream_v1_event_stream_proto.Services().ByName("EventStreamService").Methods()
	eventStreamServiceSubscribeEventStreamHandler := connect.NewServerStreamHandler(
		EventStreamServiceSubscribeEventStreamProcedure,
		svc.SubscribeEventStream,
		connect.WithSchema(eventStreamServiceMethods.ByName("SubscribeEventStream")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/event_stream.v1.EventStreamService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EventStreamServiceSubscribeEventStreamProcedure:
			eventStreamServiceSubscribeEventStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEventStreamServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEventStreamServiceHandler struct{}

func (UnimplementedEventStreamServiceHandler) SubscribeEventStream(context.Context, *connect.Request[v1.SubscribeEventStreamRequest], *connect.ServerStream[v1.SubscribeEventStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("event_stream.v1.EventStreamService.SubscribeEventStream is not implemented"))
}
